default:
  image: node:20.11.1-alpine3.19
  before_script:
    - uname -a

stages:
  - build
  - test
  - deploy
  - dast
  - post

variables:
  ENV: "dev"  # The environment used for building and deployment
  CONFIG: $CONFIG_DEV  # The content which will be written to config.json before building
  DAST_WEBSITE: "https://devregistration.opalmedapps.ca"  # Used by 'dast' job

build:
  stage: build
  before_script:
    - node --version
    - npm --version
    - ENV_ALL_CAPS=$(echo "$ENV" | tr '[:lower:]' '[:upper:]')
    - '[ -z "$CONFIG" ] && echo "Error: environment variable CONFIG_${ENV_ALL_CAPS} must be configured in GitLab CI/CD variables for this repository" && exit 1'
    - echo $CONFIG > config.json
  script:
    # Install dependencies and cache within the project directory to cache
    # See: https://javascript.plainenglish.io/improving-ci-performance-aka-how-to-save-your-money-31ff691360e4
    - npm ci --cache .npm --prefer-offline
    - npm run build
  # Cache modules in between pipelines
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  artifacts:
    # pin artifacts to the branch
    # see: https://docs.gitlab.com/ee/ci/jobs/job_artifacts.html#with-a-dynamically-defined-name
    name: "$CI_COMMIT_REF_SLUG"
    expire_in: 1 week
    paths:
      - dist
      - node_modules


deploy:
  stage: deploy
  image: alpine:latest
  environment: $ENV
  needs:
    - build
  script:
    - apk add --no-cache lftp
    - lftp --version
    - cd dist
    - echo "listing working directory..."
    - ls -la
    - echo "transferring files and listing remote directory..."
    - echo "deploying to ${CI_ENVIRONMENT_NAME}"
    # lftp mirror arguments: https://www.cyberciti.biz/faq/lftp-mirror-example/
    # The file config.json is excluded to prevent it from being deleted on the server
    - >
      lftp -e "
        set cmd:fail-exit yes;
        open $FTP_HOST;
        user $FTP_USER $FTP_PASSWORD;
        mirror --exclude='config.json' --reverse --delete --parallel=10 --verbose ./ ./registration/${CI_ENVIRONMENT_NAME}/;
        ls -la registration/${CI_ENVIRONMENT_NAME};
        bye
      "
  # rules:
  #   - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

include:
  # Secret Detection: https://docs.gitlab.com/ee/user/application_security/secret_detection/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Secret-Detection.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  # Dependency Scanning: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  # SAST: https://docs.gitlab.com/ee/user/application_security/sast/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  # DAST Scanning: https://docs.gitlab.com/ee/user/application_security/dast/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Security/DAST.gitlab-ci.yml
  - template: DAST.gitlab-ci.yml

# Job Customizations

# Secret Detection:
# https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
secret_detection:
  variables:
    SECRET_DETECTION_HISTORIC_SCAN: "true"

# Dependency Scanning
# https://docs.gitlab.com/ee/user/application_security/dependency_scanning/index.html#overriding-dependency-scanning-jobs
gemnasium-dependency_scanning:
  dependencies: ["build"]

# DAST Scanning:
# https://docs.gitlab.com/ee/user/application_security/dast/browser/configuration/requirements.html
# https://docs.gitlab.com/ee/user/application_security/dast/browser/configuration/enabling_the_analyzer.html
dast:
  # with needs: due to reliance on the deploy job on a non default branch the pipeline fails with
  # 'dast' job needs 'deploy' job, but 'deploy' is not in any previous stage
  # dast comes after the deploy stage so always after by default
  needs:
    - deploy
  # https://docs.gitlab.com/ee/user/application_security/dast/browser/configuration/variables.html
  variables:
    DAST_BROWSER_SCAN: "true"
    # enables active scanning
    # https://docs.gitlab.com/ee/user/application_security/dast/browser/checks/#active-checks
    # DAST_FULL_SCAN_ENABLED: "true"
  rules:
    # ensure that 'deploy' job is in a previous stage
    # TODO only run this in Dev?
    - if: $ENV == "dev" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Downstream Pipelines

# Extended job for launching a downstream pipeline in another environment
# See: https://docs.gitlab.com/ee/ci/pipelines/downstream_pipelines.html
.build and deploy downstream:
  stage: post
  rules:
    # Avoid infinite recursion
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
      when: never
    # Only offer build and deployment in other environments after automatic build and deployment for Dev
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: manual
  trigger:
    strategy: depend
    include:
      - local: .gitlab-ci.yml

# Launches a downstream pipeline to build for the Demo environment
build and deploy demo:
  extends: .build and deploy downstream
  variables:
    # Override pipeline variables to run for the Demo environment
    ENV: "demo"
    CONFIG: $CONFIG_DEMO

# Launches a downstream pipeline to build for the DevOps environment
build and deploy devops:
  extends: .build and deploy downstream
  variables:
    # Override pipeline variables to run for the DevOps environment
    ENV: "devops"
    CONFIG: $CONFIG_DEVOPS

# Launches a downstream pipeline to build for the PreProd environment
build and deploy preprod:
  extends: .build and deploy downstream
  variables:
    # Override pipeline variables to run for the PreProd environment
    ENV: "preprod"
    CONFIG: $CONFIG_PREPROD

# Launches a downstream pipeline to build for the QA environment
build and deploy qa:
  extends: .build and deploy downstream
  variables:
    # Override pipeline variables to run for the QA environment
    ENV: "qa"
    CONFIG: $CONFIG_QA

# Launches a downstream pipeline to build for the Staging environment
build and deploy staging:
  extends: .build and deploy downstream
  variables:
    # Override pipeline variables to run for the Staging environment
    ENV: "staging"
    CONFIG: $CONFIG_STAGING
