default:
  image: node:20.17.0-alpine3.20
  before_script:
    - uname -a

stages:
  - build
  - test
  - deploy
  - dast


# Checks whether the build can be executed, but doesn't produce a valid build (since a real config.json file isn't included)
check build:
  stage: build
  before_script:
    - node --version
    - npm --version
    # Since this check-build job isn't environment-specific, an empty config file is used
    - echo "{}" > config.json
  script:
    # Install dependencies and cache within the project directory to cache
    # See: https://javascript.plainenglish.io/improving-ci-performance-aka-how-to-save-your-money-31ff691360e4
    - npm ci --cache .npm --prefer-offline
    - npm run build
  # Cache modules in between pipelines
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - ".npm/"
  artifacts:
    # pin artifacts to the branch
    # see: https://docs.gitlab.com/ee/ci/jobs/job_artifacts.html#with-a-dynamically-defined-name
    name: "$CI_COMMIT_REF_SLUG"
    expire_in: 1 week
    paths:
      - node_modules


# Builds and deploys a functional copy of the site to a given environment
.build and deploy:
  stage: deploy
  needs:
    - check build
  # don't interrupt an FTP upload
  interruptible: false
  before_script:
    - '[ -z "$CONFIG" ] && echo "Error: environment variable CONFIG must be defined for this job" && exit 1'
    - echo $CONFIG > config.json
    - apk add --no-cache lftp
    - lftp --version
  script:
    - npm run build
    - cd dist
    - echo "listing working directory..."
    - ls -la
    - echo "transferring files and listing remote directory..."
    - echo "deploying to ${CI_ENVIRONMENT_NAME}"
    # lftp mirror arguments: https://www.cyberciti.biz/faq/lftp-mirror-example/
    - >
      lftp -e "
        set cmd:fail-exit yes;
        open $FTP_HOST;
        user $FTP_USER $FTP_PASSWORD;
        mirror --reverse --delete --parallel=10 --verbose ./ ./registration/${CI_ENVIRONMENT_NAME}/;
        ls -la registration/${CI_ENVIRONMENT_NAME};
        bye
      "
  artifacts:
    expire_in: 1 week
    paths:
      - dist
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


build and deploy demo:
  environment: demo
  extends: .build and deploy
  needs:
    - check build
    - build and deploy dev
  variables:
    CONFIG: $CONFIG_DEMO

build and deploy dev:
  environment: dev
  extends: .build and deploy
  variables:
    CONFIG: $CONFIG_DEV

build and deploy devops:
  environment: devops
  extends: .build and deploy
  needs:
    - check build
    - build and deploy dev
  variables:
    CONFIG: $CONFIG_DEVOPS

build and deploy preprod:
  environment: preprod
  extends: .build and deploy
  needs:
    - check build
    - build and deploy staging
  variables:
    CONFIG: $CONFIG_PREPROD

build and deploy prod:
  environment: prod
  extends: .build and deploy
  needs:
    - check build
    - build and deploy staging
  variables:
    CONFIG: $CONFIG_PROD

build and deploy qa:
  environment: qa
  extends: .build and deploy
  needs:
    - check build
    - build and deploy dev
  variables:
    CONFIG: $CONFIG_QA

build and deploy staging:
  environment: staging
  extends: .build and deploy
  needs:
    - check build
    - build and deploy qa
  variables:
    CONFIG: $CONFIG_STAGING


include:
  # Interruptible Merge Request pipelines
  - project: 'opalmedapps/engineering/ci-templates'
    file: '/templates/InterruptibleMergeRequest-Pipelines.gitlab-ci.yml'
  # use latest template versions to run security scanning jobs also in merge request pipelines:
  # https://docs.gitlab.com/ee/user/application_security/index.html#use-security-scanning-tools-with-merge-request-pipelines
  # Secret Detection: https://docs.gitlab.com/ee/user/application_security/secret_detection/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Secret-Detection.latest.gitlab-ci.yml
  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml
  # Dependency Scanning: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  # SAST: https://docs.gitlab.com/ee/user/application_security/sast/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml
  - template: Jobs/SAST.latest.gitlab-ci.yml
  # DAST Scanning: https://docs.gitlab.com/ee/user/application_security/dast/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Security/DAST.latest.gitlab-ci.yml
  - template: DAST.latest.gitlab-ci.yml

# Job Customizations

# Secret Detection:
# https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
secret_detection:
  variables:
    SECRET_DETECTION_HISTORIC_SCAN: "true"

# Dependency Scanning
# https://docs.gitlab.com/ee/user/application_security/dependency_scanning/index.html#overriding-dependency-scanning-jobs
gemnasium-dependency_scanning:
  dependencies: ["check build"]

# DAST Scanning:
# https://docs.gitlab.com/ee/user/application_security/dast/browser/configuration/requirements.html
# https://docs.gitlab.com/ee/user/application_security/dast/browser/configuration/enabling_the_analyzer.html
dast:
  # with needs: due to reliance on the deploy job on a non default branch the pipeline fails with
  # 'dast' job needs 'build and deploy dev' job, but 'build and deploy dev' is not in any previous stage
  # dast comes after the deploy stage so always after by default
  needs:
    - build and deploy dev
  # https://docs.gitlab.com/ee/user/application_security/dast/browser/configuration/variables.html
  variables:
    DAST_WEBSITE: "https://dev.registration.opalmedapps.ca"
    DAST_BROWSER_SCAN: "true"
    # enables active scanning
    # https://docs.gitlab.com/ee/user/application_security/dast/browser/checks/#active-checks
    # DAST_FULL_SCAN_ENABLED: "true"
  # ensure that 'build and deploy dev' is in a previous stage
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
